{"version":3,"sources":["Nav.js","NotFound.js","CodeBlock.js","Post.js","PostList.js","App.js","serviceWorker.js","index.js"],"names":["Nav","id","href","NotFound","useEffect","document","title","CodeBlock","this","props","language","value","style","PureComponent","defaultProps","Post","params","useState","setErrors","post","setPost","isLoading","setIsLoading","a","url","URL","search","URLSearchParams","access_token","order","select","content_type","match","slug","fetch","json","then","res","total","item","items","fields","pub","Date","sys","createdAt","toLocaleDateString","day","month","year","catch","err","fetchData","source","content","renderers","code","PostListItem","to","PostListComponent","posts","postItems","map","key","PostList","setPosts","AppRouter","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0cb88609.chunk.js","sourcesContent":["import React from \"react\";\nimport './Nav.scss'\n\nfunction Nav() {\n  return (\n    <div id=\"nav\">\n      <p>\n        Hi üëãüèºI'm Jack, a software engineer. I live in Gloucester, England. I will be writing about Go and Node.js mostly.\n      </p>\n      <ul>\n        <li><a href=\"https://github.com/jacktuck\">GitHub</a></li>\n        <li><a href=\"https://stackoverflow.com/users/2784487/jack-tuck\">StackOverflow</a></li>\n        <li><a href=\"https://twitter.com/jack_tuck\">Twitter</a></li>\n      </ul>\n    </div>\n  )\n}\n\nexport default Nav;\n","import React, { useState, useEffect } from \"react\";\n\nfunction NotFound() {\n  useEffect(() => {\n    document.title = \"Not Found ‚Äî jtuck.io\"\n  }, []);\n\n  return (\n    <div>\n      <h1>Hmm, page not found üòï.<br/>Sorry about that!</h1>\n    </div>\n  )\n}\n\nexport default NotFound;","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport style from \"react-syntax-highlighter/dist/esm/styles/prism/atom-dark\";\n\nclass CodeBlock extends PureComponent {\n  static propTypes = {\n    value: PropTypes.string.isRequired,\n    language: PropTypes.string\n  };\n\n  static defaultProps = {\n    language: null\n  };\n\n  render() {\n    const { language, value } = this.props;\n    return (\n      <SyntaxHighlighter language={language} style={style}>\n        {value}\n      </SyntaxHighlighter>\n    );\n  }\n}\n\nexport default CodeBlock;","import React, { useState, useEffect } from \"react\";\nimport ReactMarkdown from 'react-markdown';\nimport NotFound from \"./NotFound\";\nimport './Post.scss'\nimport CodeBlock from './CodeBlock'\n\nconst Post = (params) => {\n  const [hasError, setErrors] = useState(false);\n  const [post, setPost] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n\n  async function fetchData() {\n    const url = new URL('https://cdn.contentful.com/spaces/sfbobw4fvv5k/environments/master/entries')\n\n    url.search = new URLSearchParams({\n      access_token: '4OJtWZcNNAxKAhLrYNzedEPAuUNYgWdkD-zQJ5Rfzi0',\n      order: '-sys.createdAt',\n      select: 'fields.title,fields.content,sys.createdAt',\n      content_type: 'post',\n      'fields.slug': params.match.params.slug\n    })\n\n    const res = await fetch(url);\n\n    res\n      .json()\n      .then(res => {\n        setIsLoading(false)\n\n        if (res.total !== 1) {\n          return\n        }\n\n        const item = res.items[0]\n        item.fields.pub = new Date(item.sys.createdAt)\n          .toLocaleDateString('en', { day: 'numeric', month: 'short', year: 'numeric' })\n\n        setPost(item.fields)\n        document.title = `${item.fields.title} ‚Äî jtuck.io`\n      })\n      .catch(err => setErrors(err));\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  if (isLoading) return <div/>;\n\n  if (!post.title) return <NotFound/>\n\n  return (\n    <div>\n      <p id=\"backBtn\"><a href=\"/\">‚Üê back to list</a></p>\n      <div id=\"post\">\n        <h1>{post.title}</h1>\n        <p>Published {post.pub}</p>\n        <p>\n\n        <ReactMarkdown source={post.content} renderers={{ code: CodeBlock }}/>  \n        </p>  \n      </div>\n    </div>\n  )\n};\n\nexport default Post;","import React, { useState, useEffect } from \"react\";\nimport './PostList.scss'\nimport { Link } from \"react-router-dom\";\n\nconst PostListItem = (params) => {\n  let pub = new Date(params.item.sys.createdAt).toLocaleDateString('en', {\n    day: 'numeric',\n    month: 'short', \n    year: 'numeric'\n  })\n\n  return (\n    <div>\n      <div id=\"pub\">{pub}</div>\n      <h1 id=\"title\"><Link to={`/${params.item.fields.slug}`}>{params.item.fields.title}</Link></h1>\n    </div>\n  );\n};\n\nfunction PostListComponent (props) {\n  if (!props.posts.items) return <div/>\n\n  const postItems = props.posts.items.map((post) =>\n    <li key={post.sys.id}><PostListItem item={post}/></li>\n  )\n\n  return (\n    <ul id=\"posts\">\n      {postItems}\n    </ul>\n  );\n}\n\nconst PostList = () => {\n  const [hasError, setErrors] = useState(false);\n  const [posts, setPosts] = useState({});\n\n  async function fetchData() {\n    const url = new URL('https://cdn.contentful.com/spaces/sfbobw4fvv5k/environments/master/entries')\n\n    url.search = new URLSearchParams({\n      access_token: '4OJtWZcNNAxKAhLrYNzedEPAuUNYgWdkD-zQJ5Rfzi0',\n      order: '-sys.createdAt',\n      select: 'fields.slug,fields.title,sys.id,sys.createdAt',\n      content_type: 'post',\n    })\n\n    const res = await fetch(url);\n\n    res\n      .json()\n      .then(res => setPosts(res))\n      .catch(err => setErrors(err));\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (<PostListComponent posts={posts}/>)\n};\n\nexport default PostList;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport './App.scss'\nimport Nav from './Nav'\nimport Post from './Post'\nimport PostList from './PostList'\nimport NotFound from \"./NotFound\";\n\nfunction AppRouter() {\n  return (\n    <Router>\n      <div id=\"container\">\n        <div id=\"sidenav\">\n          <Nav/>\n        </div>\n\n        <div id=\"page\">\n          <Switch>\n            <Route path=\"/\" exact component={PostList} />\n            <Route path=\"/:slug\" component={Post} />\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n\n      </div>\n    </Router>\n  );\n}\n\nexport default AppRouter;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}